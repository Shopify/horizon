{% doc %}
  @prompt
    make me a page loader that is only the same size as a border and make the colour editable I want the page to load with a line that moves across the top of the page from left to right as the page loads, fix the animation to the page loading % and make it full width and you know subtle
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-page-loader-{{ ai_gen_id }} {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: {{ block.settings.loader_height }}px;
    z-index: 9999;
    pointer-events: none;
    background-color: transparent;
  }

  .ai-page-loader-bar-{{ ai_gen_id }} {
    height: 100%;
    width: 0%;
    background-color: {{ block.settings.loader_color }};
    transition: width 0.3s ease;
    box-shadow: 0 0 {{ block.settings.glow_intensity }}px {{ block.settings.loader_color }};
  }

  .ai-page-loader-{{ ai_gen_id }}.loaded {
    opacity: 0;
    transition: opacity 0.5s ease {{ block.settings.fade_delay }}s;
  }

  .ai-page-loader-{{ ai_gen_id }}.hidden {
    display: none;
  }

  {% if block.settings.show_background %}
    .ai-page-loader-{{ ai_gen_id }}::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: {{ block.settings.background_color }};
      opacity: {{ block.settings.background_opacity | divided_by: 100.0 }};
    }
  {% endif %}
{% endstyle %}

<page-loader-{{ ai_gen_id }}
  class="ai-page-loader-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-page-loader-bar-{{ ai_gen_id }}"></div>
</page-loader-{{ ai_gen_id }}>

<script>
  (function() {
    class PageLoader{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.progressBar = this.querySelector('.ai-page-loader-bar-{{ ai_gen_id }}');
        this.progress = 0;
        this.targetProgress = 0;
        this.animationFrame = null;
        this.startTime = Date.now();
        this.minDuration = {{ block.settings.min_duration | times: 1000 }};
        this.maxDuration = {{ block.settings.max_duration | times: 1000 }};
      }

      connectedCallback() {
        this.initLoader();
      }

      initLoader() {
        if (document.readyState === 'complete') {
          this.completeLoading();
          return;
        }

        this.simulateProgress();
        
        document.addEventListener('DOMContentLoaded', () => {
          this.targetProgress = 90;
        });

        window.addEventListener('load', () => {
          this.completeLoading();
        });

        document.addEventListener('readystatechange', () => {
          if (document.readyState === 'interactive') {
            this.targetProgress = Math.max(this.targetProgress, 70);
          }
        });
      }

      simulateProgress() {
        const updateProgress = () => {
          const elapsed = Date.now() - this.startTime;
          const progressRate = Math.min(elapsed / this.maxDuration, 0.95);
          
          if (this.targetProgress < progressRate * 100) {
            this.targetProgress = progressRate * 100;
          }

          if (this.progress < this.targetProgress) {
            this.progress += (this.targetProgress - this.progress) * 0.1;
            this.updateProgressBar();
          }

          if (this.progress < 95) {
            this.animationFrame = requestAnimationFrame(updateProgress);
          }
        };

        this.animationFrame = requestAnimationFrame(updateProgress);
      }

      completeLoading() {
        const elapsed = Date.now() - this.startTime;
        const delay = Math.max(0, this.minDuration - elapsed);

        setTimeout(() => {
          this.targetProgress = 100;
          this.progress = 100;
          this.updateProgressBar();

          setTimeout(() => {
            this.classList.add('loaded');
            setTimeout(() => {
              this.classList.add('hidden');
            }, {{ block.settings.fade_delay | times: 1000 | plus: 500 }});
          }, 200);
        }, delay);
      }

      updateProgressBar() {
        if (this.progressBar) {
          this.progressBar.style.width = `${this.progress}%`;
        }
      }

      disconnectedCallback() {
        if (this.animationFrame) {
          cancelAnimationFrame(this.animationFrame);
        }
      }
    }

    customElements.define('page-loader-{{ ai_gen_id }}', PageLoader{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Page loader",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Loader appearance"
    },
    {
      "type": "range",
      "id": "loader_height",
      "min": 1,
      "max": 8,
      "step": 1,
      "unit": "px",
      "label": "Loader height",
      "default": 2
    },
    {
      "type": "color",
      "id": "loader_color",
      "label": "Loader color",
      "default": "#25282a"
    },
    {
      "type": "range",
      "id": "glow_intensity",
      "min": 0,
      "max": 10,
      "step": 1,
      "unit": "px",
      "label": "Glow intensity",
      "default": 2
    },
    {
      "type": "header",
      "content": "Background"
    },
    {
      "type": "checkbox",
      "id": "show_background",
      "label": "Show background",
      "default": false
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "background_opacity",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "%",
      "label": "Background opacity",
      "default": 20
    },
    {
      "type": "header",
      "content": "Timing"
    },
    {
      "type": "range",
      "id": "min_duration",
      "min": 0.5,
      "max": 3,
      "step": 0.1,
      "unit": "s",
      "label": "Minimum duration",
      "default": 1
    },
    {
      "type": "range",
      "id": "max_duration",
      "min": 2,
      "max": 10,
      "step": 0.5,
      "unit": "s",
      "label": "Maximum duration",
      "default": 5
    },
    {
      "type": "range",
      "id": "fade_delay",
      "min": 0,
      "max": 2,
      "step": 0.1,
      "unit": "s",
      "label": "Fade out delay",
      "default": 0.3
    }
  ],
  "presets": [
    {
      "name": "Page loader"
    }
  ]
}
{% endschema %}